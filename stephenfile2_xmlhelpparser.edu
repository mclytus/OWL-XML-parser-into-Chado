<?php


/**
* @ file
*
*/

function tripal_insert_cv($name, $definition) {

$owlheader_values = array(
'title' => cv.name
'description' => cv.description
);

if (!$cv)) {
  print "ERROR can not read vocabulary: '$cv'\n";
  exit();
}

/**
*
*  @file
*/

function tripal_insert_db($values, $options = array()) {


}


/**
 *  @file
 *  @add file from header
 *
 */
tripal_cv_parse_owl('ro.owl');

/**
 *
 * @param unknown $filename 
 */
function tripal_cv_parse_owl($filename) {
  
  // Load the XML file.
  $owl = new XMLReader();
  
  // Open the OWL file for parsing.
  if (!$owl->open($filename)) {
    print "ERROR opening OWL file: '$filename'\n";
    exit();
  }
  
  // Holds all of the namespaces used by this OWL file.
  $namespaces = array();
  
  do {
    if ($owl->nodeType == XMLReader::ELEMENT) {
      // Deal with each section of OWL.
      switch ($owl->name) {
        case 'rdf:RDF':
          // handle_namespaces($owl, $namespaces);
          // print_r($namespaces);
          break;
        case 'owl:Ontology':
          // handle_header($owl);
          break;
        case 'owl:AnnotationProperty':
          // handle_annotation_property($owl);
          break;
        case 'rdf:Description':
          // handle_description($owl);
          break;
        case 'owl:ObjectProperty':
          // handle_object_property($owl);
          break;
        case 'owl:Class':
          handle_class($owl);
          break;
      }
    }
  }
  while ($owl->read());
  
  // Close the XMLReader file object.
  $owl->close();
}

/**
 * Retreives the namespaces from the OWL rdf:RDF tag.
 *
 * @param $owl The
 * XML reader object.
 * @param $namespaces An
 * empty array into which the namespaces will be written
 * 
 * @return no return value.
 */
function handle_namespaces($owl, &$namespaces) {
  $num_attrs = $owl->attributeCount;
  $owl->moveToFirstAttribute();
  for ($i = 0; $i < $num_attrs; $i++) {
    $owl->moveToNextAttribute();
    $matches = array();
    if (preg_match('/^xmlns:(.*)$/', $owl->name, $matches)) {
      $namespaces[$matches[1]] = $owl->value;
    }
  }
}

/**
 *
 * @param
 * $owl
 */
function handle_header($owl) {
  $title = '';
  $description = '';
  $homepage = '';
  $dbname = '';
  $matches = array();
  
  // The about attribute contains the URL for the resource of this
  // OWL file. We will use the name of the OWL file as the
  // chado.db.name field.
  $about = $owl->getAttribute('rdf:about');
  if (preg_match('/^.*\/(.*)\.owl.*$/', $about, $matches)) {
    $dbname = strtoupper($matches[1]);
  }
  else {
    print "ERROR: count not find the database name\n";
    exit();
  }
  
  // Itereate through the XML elements to find the header tags that we
  // will support.
  while ($owl->read()) {
    if ($owl->nodeType == XMLReader::ELEMENT) {
      $matches = array();
      $name = $owl->name;
      switch ($name) {
        case 'dc:title':
          $owl->read();
          $title = $owl->value;
          // Goes to the chado.cv.name field.
          break;
        case 'dc:description':
          $owl->read();
          $description = $owl->value;
          // Goes to the chado.cv.description field.
          break;
        case 'dc:source':
          $owl->read();
          $resource = $owl->value;
          break;
        case 'foaf:homepage':
          $owl->read();
          $homepage = $owl->value;
          // Goes to the chado.db.url field.
          break;
        case 'owl:imports':
          // Ignore these lines. Not needed for loading into Chado.
          break;
      }
    }
    // If we've reached the end of the ObjectProperty block then rreturn.
    if ($owl->nodeType == XMLReader::END_ELEMENT and $owl->name == 'owl:Ontology') {
      print "DB Name: $dbname\n";
      print "Title: $title\n";
      print "Description: $description\n";
      print "Homepage: $homepage\n";
      print "Resource: $resource\n";
      // Create the CV and DB records here.
      
      return;
    }
  }
}

/**
 *
 * @param
 * $owl
 */
function handle_object_property($owl) {
  // The about attribute contains the URL for the resource (our term).
  // The chado.db.name and chado.dbxref.accession should be in this URL
  // and we can
  $about = $owl->getAttribute('rdf:about');
  print "$about\n";
  
  // If this element is empty then just return.
  if ($owl->isEmptyElement) {
    return;
  }
  
  // Move the element pointer to the first element inside of the
  // ObjectProperty stanza.
  $owl->read();
  
  // Itereate through the XML elements to find the header tags that we
  // will support.
  do {
    // If we've reached the end of the ObjectProperty block then rreturn.
    if ($owl->nodeType == XMLReader::END_ELEMENT and $owl->name == 'owl:ObjectProperty') {
      return;
    }
    else if ($owl->nodeType == XMLReader::ELEMENT) {
      $matches = array();
      $name = $owl->name;
      switch ($name) {
        case 'rdfs:label':
          $owl->read();
          $value = $owl->value;
          // print "$name\t$value\n";
          // Goes to chado.cvterm.name
          break;
        case 'rdfs:range':
          // Not needed for Chado.
          break;
        case 'rdfs:domain':
          break;
        case 'rdfs:subPropertyOf':
          break;
        case 'rdfs:comment':
          break;
        case 'rdf:type':
          break;
        case (preg_match('/^oboInOwl:(.*)$/', $name, $matches) ? TRUE : FALSE):
          // create a function to read in the OboInOwl tags.
          $accession = $matches[1];
          break;
        case (preg_match('/^obo:(.*)$/', $name, $matches) ? TRUE : FALSE):
          // OBO terms can either be from the OBO vocabulary or from another
          // onotology (e.g. IAO or RO).
          $id = $matches[1];
          $vocab = '';
          $accession = '';
          $matches = array();
          if (preg_match('/^(.*)_(.*)$/', $id, $matches)) {
            // $vocab = $matches[1];
            // $owl->read();
            // $value = $owl->value;
            // print "$name\t$value\n";
            // $accession = $matches[2];
          }
          else {
            $vocab = 'OBO';
            $accession = $id;
          }
          // Deal with the term
          break;
        case (preg_match('/^owl:(.*)$/', $name, $matches) ? TRUE : FALSE):
          break;
      }
    }
  }
  while ($owl->next());
}
/**
 *
 * @param
 * $owl
 */
function handle_annotation_property($owl) {
  // The about attribute contains the URL for the resource (our term).
  // The chado.db.name and chado.dbxref.accession should be in this URL
  // and we can
  $about = $owl->getAttribute('rdf:about');
  print "$about\n";
  
  // If this element is empty then just return.
  if ($owl->isEmptyElement) {
    return;
  }
  
  // Move the element pointer to the first element inside of the
  // AnnotationProperty stanza.
  $owl->read();
  
  // Itereate through the XML elements to find the header tags that we
  // will support.
  do {
    // If we've reached the end of the Annotation Property block then return.
    if ($owl->nodeType == XMLReader::END_ELEMENT and $owl->name == 'owl:AnnotationProperty') {
      return;
    }
    else if ($owl->nodeType == XMLReader::ELEMENT) {
      $matches = array();
      
      $name = $owl->name;
      switch ($name) {
        case 'rdfs:label':
          $owl->read();
          $value = $owl->value;
          print "$name\t$value\n";
          
          // Goes to chado.cvterm.name
          break;
        case 'rdfs:seeAlso':
          // Not needed for Chado.
          break;
        case 'foaf:page':
          break;
        case 'rdfs:subPropertyOf':
          if ($owl->isEmptyElement) {
            $resource = $owl->getAttribute('rdf:resource');
            print $resource . "\n";
          }
          break;
        case 'rdfs:comment':
          $owl->read();
          $value = $owl->value;
          print "$name\t$value\n";
          break;
        // case (preg_match('/^oboInOwl:(.*)$/', $name, $matches) ? TRUE : FALSE):
        // create a function to read in the OboInOwl tags.
        // $accession = $matches[1];
        // break;
        case (preg_match('/^obo:(.*)$/', $name, $matches) ? TRUE : FALSE):
          // OBO terms can either be from the OBO vocabulary or from another
          // onotology (e.g. IAO or RO).
          $id = $matches[1];
          $vocab = '';
          $accession = '';
          $matches = array();
          if (preg_match('/^(.*)_(.*)$/', $id, $matches)) {
            $vocab = $matches[1];
            $owl->read();
            $value = $owl->value;
            print "$name\t$value\n";
            $accession = $matches[2];
          }
          else {
            $vocab = 'OBO';
            $accession = $id;
          }
          // Deal with the term
          break;
        case (preg_match('/^owl:(.*)$/', $name, $matches) ? TRUE : FALSE):
          break;
      }
    }
  }
  while ($owl->next());
}

/**
 *
 * @param
 * $owl
 */
function handle_description($owl) {
  // The about attribute contains the URL for the resource (our term).
  // The chado.db.name and chado.dbxref.accession should be in this URL
  // and we can
  $about = $owl->getAttribute('rdf:about');
  print "$about\n";
  
  // If this element is empty then just return.
  if ($owl->isEmptyElement) {
    return;
  }
  
  // Move the element pointer to the first element inside of the
  // Description stanza.
  $owl->read();
  
  do {
    // If we've reached the end of the description block then return.
    if ($owl->nodeType == XMLReader::END_ELEMENT and $owl->name == 'rdf:Description') {
      return;
    }
    else if ($owl->nodeType == XMLReader::ELEMENT) {
      $matches = array();
      $name = $owl->name;
      switch ($name) {
        case 'rdfs:label':
          $owl->read();
          $value = $owl->value;
          print "$name\t$value\n";
          
          // Goes to chado.cvterm.name
          break;
        case 'rdfs:subPropertyOf':
          if ($owl->isEmptyElement) {
            $resource = $owl->getAttribute('rdf:resource');
            print $resource . "\n";
          }
          break;
        case 'rdfs:subClassOf':
          break;
        
        case (preg_match('/^oboInOwl:(.*)$/', $name, $matches) ? TRUE : FALSE):
          // create a function to read in the OboInOwl tags.
          $accession = $matches[1];
          break;
        case (preg_match('/^obo:(.*)$/', $name, $matches) ? TRUE : FALSE):
          // OBO terms can either be from the OBO vocabulary or from another
          // onotology (e.g. IAO or RO).
          $id = $matches[1];
          $vocab = '';
          $accession = '';
          $matches = array();
          if (preg_match('/^(.*)_(.*)$/', $id, $matches)) {
            $vocab = $matches[1];
            $owl->read();
            $value = $owl->value;
            // print "$name\t$value\n";
            $accession = $matches[2];
          }
          else {
            $vocab = 'OBO';
            $accession = $id;
          }
          // Deal with the term
          break;
        case (preg_match('/^owl:(.*)$/', $name, $matches) ? TRUE : FALSE):
          break;
      }
    }
  }
  while ($owl->next());
}

/**
 *
 * @param
 * $owl
 */
function handle_class($owl) {
  // The about attribute contains the URL for the resource (our term).
  // The chado.db.name and chado.dbxref.accession should be in this URL
  // and we can
  $about = $owl->getAttribute('rdf:about');
  print "$about\n";
  
  // If this element is empty then just return.
  if ($owl->isEmptyElement) {
    return;
  }
  
  // Move the element pointer to the first element inside of the
  // ObjectProperty stanza.
  $owl->read();
  
  do {
    // If we've reached the end of the Class block then return.
    if ($owl->nodeType == XMLReader::END_ELEMENT and $owl->name == 'owl:Class') {
      return;
    }
    else if ($owl->nodeType == XMLReader::ELEMENT) {
      $matches = array();
      $name = $owl->name;
      switch ($name) {
        case 'rdfs:label':
          $owl->read();
          $value = $owl->value;
          print "$name\t$value\n";
          
          // Goes to chado.cvterm.name
          break;
        case 'rdfs:subClassOf':
          if ($owl->isEmptyElement) {
            $resource = $owl->getAttribute('rdf:resource');
            print $resource . "\n";
          }
          else {
          }
          break;
        case (preg_match('/^obo:(.*)$/', $name, $matches) ? TRUE : FALSE):
          // OBO terms can either be from the OBO vocabulary or from another
          // onotology (e.g. IAO or RO).
          $id = $matches[1];
          $vocab = '';
          $accession = '';
          $matches = array();
          if (preg_match('/^(.*)_(.*)$/', $id, $matches)) {
            $vocab = $matches[1];
            $owl->read();
            $value = $owl->value;
            print "$name\t$value\n";
            $accession = $matches[2];
          }
          else {
            $vocab = 'OBO';
            $accession = $id;
          }
          // Deal with the term
          break;
        case (preg_match('/^owl:(.*)$/', $name, $matches) ? TRUE : FALSE):
          break;
      }
    }
  }
  while ($owl->next());
}
